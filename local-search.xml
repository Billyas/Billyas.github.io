<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/p/undefined.html"/>
    <url>/p/undefined.html</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有时候我们经常需要在Windows Terminal，powershell内使用http代理来拉去GitHub代码、软件包等等，每次都需要手动配置很麻烦。其实我们可以使用.ps1脚本来启动。</p><blockquote><p> <a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_scripts?view=powershell-7.4">https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_scripts?view=powershell-7.4</a></p></blockquote><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>文本编辑proxy.ps1文件写入一下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ps1"># 设置代理地址和端口<br>$env:HTTP_PROXY = &quot;http://127.0.0.1:10809&quot;<br>$env:HTTPS_PROXY = &quot;http://127.0.0.1:10809&quot;<br><br># 显示设置的环境变量<br>Write-Host &quot;HTTP_PROXY 设置为: $($env:HTTP_PROXY)&quot;<br>Write-Host &quot;HTTPS_PROXY 设置为: $($env:HTTPS_PROXY)&quot;<br><br><br>#powershell #powershell启动<br>wt     #Windows terminal启动<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用脚本在启动powershell前配置环境变量。启动的程序会继承环境变量。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows平台下USRP_E310基础环境配置</title>
    <link href="/p/1098621e.html"/>
    <url>/p/1098621e.html</url>
    
    <content type="html"><![CDATA[<h2 id="硬件介绍"><a href="#硬件介绍" class="headerlink" title="硬件介绍"></a>硬件介绍</h2><p> USRP E310 是NI公司开发的便携独立SDR平台具体参数如下</p><blockquote><ul><li>Xilinx Zynq 7020 SoC：具有 ARM Cortex A9 667 MHz (SG1) 或 866 MHz (SG3) 双核处理器的 7 系列 FPGA</li><li>Analog Devices AD9361 RFIC 直接变频收发器</li><li>频率范围：70 MHz - 6 GHz</li><li>高达 56 MHz 的瞬时带宽</li><li>2x2 MIMO 收发器</li><li>高达 10 MS/s 的采样数据传输速率到 ARM 处理器</li><li>RX、TX 滤波器组</li><li>集成 GPS 接收器</li><li>RF 片上网络 (RFNoC™) FPGA 开发框架支持</li><li>产品链接<a href="https://www.ettus.com/all-products/e310/">https://www.ettus.com/all-products/e310/</a></li></ul></blockquote><p><img src="/./Windows%E5%B9%B3%E5%8F%B0%E4%B8%8BUSRP-E310%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2028247-20230207110556173-1348715103.png" alt="USRP E310"></p><h2 id="USRP更新系统"><a href="#USRP更新系统" class="headerlink" title="USRP更新系统"></a>USRP更新系统</h2><ol><li><p>由于出厂版本较旧且存在版本不一致问题，需要更新为一致版本，系统镜像在<a href="https://files.ettus.com/binaries/cache/e3xx/meta-ettus-v4.3.0.0/e3xx_e310_sg3_sdimg_default-v4.3.0.0.zip">官网传送门 files.ettus.com</a> ，寻找对应的版本，本设备为<code>USRP E310 sg3</code> 对应的版本应该是<code>e3xx_e310_sg3_sdimg_default-v4.3.0.0.zip</code>，注意后面的<code>V4.3.0</code>为<code>UHD</code>版本，在下载<code>GNU Radio</code>时候应保持版本一致。</p></li><li><p>解压压缩包获得后缀为<code>sdimg</code>的文件，即为系统的<code>img</code>格式镜像，直接在<code>Windows</code>系统上使用任何一款<code>写盘软件</code>（推荐<code>Rufus</code>）将系统镜像写入<code>Micro SD</code>卡即可，重新插入SD卡，等待系统初始化开机，这时正确连接网线后即可通过<code>DHCP</code>自动获取IP地址，上位机PC端与USRP处于同一局域网即可被UHD发现。此时USRP内已经为<code>V4.3.0</code>的<code>UHD</code>版本。</p></li></ol><h2 id="Windows安装UHD与GNU-Radio"><a href="#Windows安装UHD与GNU-Radio" class="headerlink" title="Windows安装UHD与GNU Radio"></a>Windows安装UHD与GNU Radio</h2><h3 id="安装GNU-Radio"><a href="#安装GNU-Radio" class="headerlink" title="安装GNU Radio"></a>安装GNU Radio</h3><p>上位机依然采用<code>Windows 10</code>系统， 通过GNU Radio官网发行的二进制安装文件安装<a href="https://wiki.gnuradio.org/index.php/InstallingGR">官网传送门 wiki.gnuradio.org</a> , 安装对应的V3.10.4版本，该版本对应的UHD为V4.3.0。安装后可以直接使用</p><p><code>GNU Radio gqrx</code>进行USRP扫描连接，并且可通过gprx接受FM信号等，也可实现基础的频谱扫描功能。如下图所示。</p><p><img src="/./Windows%E5%B9%B3%E5%8F%B0%E4%B8%8BUSRP-E310%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2028247-20230207110539280-128023282.png" alt="接收FM广播信号"></p><h3 id="安装UHD"><a href="#安装UHD" class="headerlink" title="安装UHD"></a>安装UHD</h3><p>UHD在<code>windows10</code>下的安装，<a href="https://files.ettus.com/binaries/uhd/latest_release/4.3.0.0/Windows-10-x64/">官网传送门 files.ettus.com</a> 下载安装电脑上对应VS版本的UHD，如果配置<code>Path</code>失败需要自行将安装目录下<code>bin</code>路径加入<code>系统环境变量</code>, 安装后需要额外编译<code>libusb</code>如果运行<code>uhd_find_devices.exe</code>时，报错是usb_set_option未连接到uhd.dll可能是缺少<code>libusb-1.0.dll</code>。下载相应的dll生成程序<code>libusb-master</code>（GitHub 源码<a href="https://github.com/libusb/libusb">传送门</a>拉下来），解压缩后在文件夹msvc中打开对应vs版本的.sln，编译选择对应的版本例如<code>x64</code>或者<code>win32</code>，最后选择系统版本编译运行就可以了。运行成功后，会在根目录下生成x64文件夹，找到dll文件夹中的libusb-1.0.dll，复制到<code>Windows System32</code>目录中就可以了。可参考<a href="https://blog.csdn.net/Frau_Liu/article/details/116057223">博文</a>。正确安装后CMD执行 <code>uhd_find_devices.exe</code> 即可发现同一局域网下的USRP设备。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\Admin&gt; uhd_find_devices.exe<br>[<span class="hljs-type">INFO</span>] [<span class="hljs-type">UHD</span>] Win32; Microsoft Visual C++ version <span class="hljs-number">14.2</span>; Boost_107800; UHD_4.<span class="hljs-number">3.0</span>.<span class="hljs-number">0</span><span class="hljs-literal">-release</span><br>--------------------------------------------------<br>-- UHD Device <span class="hljs-number">0</span><br>--------------------------------------------------<br>Device Address:<br>    serial: <span class="hljs-number">320</span>BEFD<br>    addr: <span class="hljs-number">192.168</span>.<span class="hljs-number">3.62</span><br>    claimed: False<br>    fpga: n/a<br>    mgmt_addr: <span class="hljs-number">192.168</span>.<span class="hljs-number">3.62</span><br>    name: <span class="hljs-built_in">ni</span><span class="hljs-literal">-e31x</span><span class="hljs-literal">-320BEFD</span><br>    product: e310_sg3<br>    <span class="hljs-built_in">type</span>: e3xx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>USRP E310</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vultr变更流量统计规则及Vultr2T免费流量解析</title>
    <link href="/p/a8a2e961.html"/>
    <url>/p/a8a2e961.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vultr最近宣布为全球用户提供2T免费基础流量同时变更流量统计规则</p><h2 id="新闻背景"><a href="#新闻背景" class="headerlink" title="新闻背景"></a>新闻背景</h2><blockquote><p>  今天我们宣布了新的全球带宽定价计划。这些变化将使高性能云计算对世界各地的用户来说更容易&gt;获得和负担得起。以下是亮点：</p></blockquote><blockquote><p>  <strong>每个 Vultr 客户现在每个月都会收到 2 TB (2 TB) 的免费出站数据传输，此外每个订阅都包含传输。</strong></p><ul><li>数据入口现在将是免费的。</li><li>所有客户都将收到跨所有实例和地点的全球账户级转账汇集。</li><li>Vultr 现在将提供降低的单一全球出口超额率，每 GB 仅为 0.01 美元。</li></ul><p>  <strong>与 Vultr 现有的已发布政策一致，所有带宽分配将在每个月的过程中按小时累积。</strong></p></blockquote><blockquote><p>在众多云计算提供商纷纷选择涨价之际，Vultr却在降低带宽价格。Vultr 致力于为世界各地的企业和开发人员提供任何云计算平台中性价比最高的产品。我们寻求通过在全球更多地方开设新的云数据中心位置来实现这一目标，让更多企业和人们更接近负担得起的高性能云计算。我们还坚持不懈地专注于为我们的客户提供更高的价值并简化他们的云体验。正是本着这种精神，今天我们正在从根本上改进我们的定价模型，以简化全球开发人员、IT 运营和财务团队的带宽消耗。在众多云计算提供商纷纷选择涨价之际，Vultr却在降低带宽价格。Vultr 致力于为世界各地的企业和开发人员提供任何云计算平台中性价比最高的产品。我们寻求通过在全球更多地方开设新的云数据中心位置来实现这一目标，让更多企业和人们更接近负担得起的高性能云计算。我们还坚持不懈地专注于为我们的客户提供更高的价值并简化他们的云体验。正是本着这种精神，今天我们正在从根本上改进我们的定价模型，以简化全球开发人员、IT 运营和财务团队的带宽消耗。</p></blockquote><blockquote><p>云计算用户面临的最重大挑战之一是不必要的复杂性、成本和计费的不可预测性。IT 团队的任务是提高运营效率、加速数字创新以及管理现有基础架构和应用程序，同时还要面临紧缩的预算。由于不可预见的成本和带宽超额费用导致的账单意外可能会对 IT 规划和投资产生超出预算的影响。在 Vultr，我们认为传统的云计算定价过于复杂，加载了不必要的费用，而且设计难以控制。我们理解为什么该模型不适用于大多数用户，并且我们已经使我们自己的定价计划更加简单和更可预测。</p></blockquote><p>原文摘自<a href="https://www.vultr.com/news/Vultr-Announces-Reduced-Bandwidth-Pricing-2-Tb-Of-Free-Monthly-Egress-Free-Ingress-And-Global-Pooling/" title="【Vultr官网】">【Vultr官网】</a> ，谷歌机器翻译。</p><h2 id="实际分析"><a href="#实际分析" class="headerlink" title="实际分析"></a>实际分析</h2><h3 id="2T基础流量"><a href="#2T基础流量" class="headerlink" title="2T基础流量"></a>2T基础流量</h3><ul><li><p>我们通过Vultr官网进行VPS价格对比发现，实时上2T基础流量是对于用户而言的，服务器实例中 <strong>High Performance（高性能）VPS</strong> 基础流量是2T，其他Regular Performance(常规共享型) VPS依然是低于2T流量<br><img src="/p/a8a2e961/2028247-20230110154932703-161314767.png" alt="image"><br><img src="/p/a8a2e961/2028247-20230110155119212-162297952.png" alt="image"><br><img src="/p/a8a2e961/2028247-20230110155335951-36147999.png" alt="image"></p><hr><p><strong><code>2T</code>免费流量是用户级别的，2T流量以内<code>不收取费用</code></strong></p><p><img src="/p/a8a2e961/2028247-20230110185322014-204278939.png" alt="image"></p><p> <strong>事实上，Vultr <code>2T</code> 基础流量是基于每个用户的， 流量是在账单中分配的，用户的全部流量是<code>2T+实例流量</code>，我的实例流量<code>0.5T+2T=2.5T</code></strong></p></li></ul><hr><h3 id="流量统计规则变更"><a href="#流量统计规则变更" class="headerlink" title="流量统计规则变更"></a>流量统计规则变更</h3><ul><li><p>官方公告中的 <strong>“Vultr 现有的已发布政策一致，所有带宽分配将在每个月的过程中按小时累积”</strong>, 这个规则覆盖所有用户，自2023年起所有带宽按照小时累计计算。如何理解呢？我们来看看官方的介绍。<br><img src="/p/a8a2e961/2028247-20230110160036565-2137016292.png" alt="image"></p><blockquote><p> <strong>您的门户显示的带宽可能少于计划的总带宽，因为总带宽是在 672 小时的每月计费周期内按比例分配的。这将重复每个计费周期。</strong></p><p> 例如：<br> 具有 <code>2000GB</code> 每月限额的实例将在其活动的每个小时内获得 <code>3GB</code> 的带宽 <code>(2000GB/672hr)</code>。这显示为可用带宽，格式为：<code>xGB</code>（已用）<code>/xGB</code>（可用）。</p><ul><li>在部署时，它将是：xGB（已用）/3GB（可用）。</li><li>活跃 3 小时后，它将是：xGB（已用）/9GB（可用）。</li><li>活跃 672 小时后，它将是：xGB（已用）/2000GB（可用）。</li></ul><p> 这将重复每个计费周期。</p></blockquote><p>从新的计费方式可以看出，2T的基础流量是按照小时分配的，<strong>每个月初始的可用流量按照每小时3G累计计算，月初反而更容易将带宽耗尽。随着时间的推移，月底反而流量越多</strong>。Vultr新的流量计算规则有效解决短时间高发流量的发生，但是也暴露出一定问题，用户的每月流量不是全部可用的，仅仅是按时分配的，是否在一定程度上侵犯用户的权益呢？</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    Vultr确实是给用户带来实惠，每个账户新增的2T免费流量极大减少用户的成本</p><p> <a href="https://www.vultr.com/?ref=9334530-8H">Vultr官网传送门</a></p><p> <a href="http://https//www.vultr.com/?ref=9334530-8H"><img src="/p/a8a2e961/2028247-20230110183814981-933827327.png"></a></p><h2 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h2><blockquote><p>作者：Billyme (詩)</p><p>博客园：<a href="https://www.cnblogs.com/billyme/">https://www.cnblogs.com/billyme/</a></p><p>CSDN ：<a href="https://blog.csdn.net/horizon08">https://blog.csdn.net/horizon08</a></p><p>Github：<a href="https://billyas.github.io/">https://billyas.github.io</a></p><p>标题：<a href="https://www.cnblogs.com/billyme/p/17040618.html">【VPS】Vultr变更流量统计规则及Vultr 2T免费流量解析</a></p><p>本文为 <strong>Billyme</strong> 原创作品，仅发表于以上平台，<strong>不允许转载</strong></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自建GitHub加速，优化图床质量</title>
    <link href="/p/2a56fdad.html"/>
    <url>/p/2a56fdad.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知的原因Github在国内访问异常缓慢，Gitee最近也接连遭受到审查，以前也有通过jsdelivr的加速方案，但是最近jsdelivr也接连访问受阻。<img src="https://gh.billyme.tk/https://raw.githubusercontent.com/Billyas/myimg/main/img/image-20220602003908124.png" alt="image-20220602003908124"></p><p>于是乎，本文将介绍如何自建Github加速镜像。</p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ol><li>采用<a href="https://github.com/hunshcn/gh-proxy">gh_proxy</a>开源项目，作者<a href="https://github.com/hunshcn">hunshcn</a></li><li>通过CloudFlare Worker进行转发代理</li></ol><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ol><li>以下参考开源项目文档</li></ol><blockquote><p>首页：<a href="https://workers.cloudflare.com/">https://workers.cloudflare.com</a></p><p>注册，登陆，<code>Start building</code>，取一个子域名，<code>Create a Worker</code>。</p><p>复制 <a href="https://cdn.jsdelivr.net/gh/hunshcn/gh-proxy@master/index.js">index.js</a> 到左侧代码框，<code>Save and deploy</code>。如果正常，右侧应显示首页。</p><p><code>index.js</code>默认配置下项目文件会走jsDelivr，如需走worker，修改Config变量即可</p><p><code>ASSET_URL</code>是静态资源的url（实际上就是现在显示出来的那个输入框单页面）</p><p><code>PREFIX</code>是前缀，默认（根路径情况为”/“），如果自定义路由为example.com/gh/*，请将PREFIX改为 ‘/gh/‘，注意，少一个杠都会错！</p></blockquote><p>具体部署亦可参考 <a href="https://blog.csdn.net/qq_22903531/article/details/109544730">CloudFlare的Worker免费部署服务</a></p><ol start="2"><li>根据上一步可以得到一个CloudFlare Worker的子域名，形如<code>*.workers.dev</code>，不过有可能你会得到同样差劲的结果[^1]，不要害怕，接下来我们可以利用我们自己的域名进行<code>cname</code>绑定(<code>cname</code>即是将一个域名映射到另外一个域名)，我们需要准备一个域名，将其cname指向该地址即可。具体步骤可以参考：<a href="https://blog.csdn.net/m0_58606834/article/details/124670218">CloudFlare Workers 设置使用自定义域名</a></li></ol><p><img src="https://gh.billyme.tk/https://raw.githubusercontent.com/Billyas/myimg/main/img/image-20220602005354138.png" alt="image-20220602005354138"></p><pre><code>1. cname修改细节</code></pre><p><img src="https://gh.billyme.tk/https://raw.githubusercontent.com/Billyas/myimg/main/img/image-20220602010414811.png" alt="image-20220602010414811"></p><p>​    2. 子域名添加细节<br><img src="https://gh.billyme.tk/https://raw.githubusercontent.com/Billyas/myimg/main/img/image-20220602010655364.png" alt="image-20220602010655364"></p><ol start="3"><li><p>修改后的测速[^1]效果如下：</p><p><img src="https://gh.billyme.tk/https://raw.githubusercontent.com/Billyas/myimg/main/img/image-20220602010129030.png" alt="image-20220602010129030"></p></li></ol><h2 id="使用现成的加速"><a href="#使用现成的加速" class="headerlink" title="使用现成的加速"></a>使用现成的加速</h2><blockquote><p>如果觉得太过复杂可以使用开发者的网站</p><ol><li><a href="https://ghproxy.com/">https://ghproxy.com/</a>  gh加速镜像开发者</li><li><a href="https://fastly.jsdelivr.net/">https://fastly.jsdelivr.net</a> jsdelivr中国地区加速版</li></ol></blockquote><h2 id="配置picgo"><a href="#配置picgo" class="headerlink" title="配置picgo"></a>配置picgo</h2><ol><li><p>加速镜像方式</p><p><code>&quot;customUrl&quot;: &quot;https://代理网站/https://raw.githubusercontent.com/你的GitHub用户名/仓库名/分支&quot;</code><br>如上即可</p></li><li><p>jsdelivr方式</p><p><code>&quot;customUrl&quot;: &quot;https://fastly.jsdelivr.net/gh/你的GitHub用户名/仓库名&quot;</code></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Caddy2】最新Caddy2配置文件解析</title>
    <link href="/p/ac1736fe.html"/>
    <url>/p/ac1736fe.html</url>
    
    <content type="html"><![CDATA[<h1 id="原创声明"><a href="#原创声明" class="headerlink" title="原创声明"></a>原创声明</h1><blockquote><p>作者：Billyme (詩)</p><p>博客园：<a href="https://www.cnblogs.com/billyme/">https://www.cnblogs.com/billyme/</a></p><p>CSDN ：<a href="https://blog.csdn.net/horizon08">https://blog.csdn.net/horizon08</a></p><p>Gitee：<a href="https://billyme.gitee.io/blog/">https://billyme.gitee.io/blog/</a></p><p>本文为 <strong>Billyme <strong>原创作品，仅发表于以上平台，</strong>不允许转载</strong></p></blockquote><h1 id="Caddy-介绍"><a href="#Caddy-介绍" class="headerlink" title="Caddy 介绍"></a>Caddy 介绍</h1><blockquote><p>Caddy官网：<a href="https://caddyserver.com/">CaddyServer</a></p><p>THE ULTIMATE SERVER<br>Caddy 2 is a powerful, enterprise-ready, open source web server with automatic HTTPS written in Go</p></blockquote><h1 id="Caddy2的升级指南"><a href="#Caddy2的升级指南" class="headerlink" title="Caddy2的升级指南"></a>Caddy2的升级指南</h1><h3 id="升级指南🔗"><a href="#升级指南🔗" class="headerlink" title="升级指南🔗"></a>升级指南<a href="https://caddyserver.com/docs/v2-upgrade#upgrade-guide">🔗</a></h3><p>Caddy 2 是一个全新的代码库，从头开始编写，以改进 Caddy 1。Caddy 2 不向后兼容 Caddy 1。但不用担心，对于大多数基本设置，并没有太大的不同。本指南将帮助您尽可能轻松地过渡。</p><p>本指南不会深入研究可用的新功能——它们真的很酷，顺便说一下，你应该<a href="https://caddyserver.com/docs/getting-started">学习它们</a>——这里的目标是让你快速启动并运行 Caddy 2。</p><h3 id="菜单🔗"><a href="#菜单🔗" class="headerlink" title="菜单🔗"></a>菜单<a href="https://caddyserver.com/docs/v2-upgrade#menu">🔗</a></h3><ul><li><a href="https://caddyserver.com/docs/v2-upgrade#high-order-bits">高位</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#steps">脚步</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#https-and-ports">HTTPS 和端口</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#command-line">命令行</a></li><li>球童档案<ul><li><a href="https://caddyserver.com/docs/v2-upgrade#primary-changes">主要变化</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#basicauth">基本认证</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#browse">浏览</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#errors">错误</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#ext">分机</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#fastcgi">快速cgi</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#gzip">压缩包</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#header">标题</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#log">日志</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#proxy">代理</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#redir">重新目录</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#rewrite">改写</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#root">根</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#status">状态</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#templates">模板</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#tls">tls</a></li></ul></li><li><a href="https://caddyserver.com/docs/v2-upgrade#service-files">服务文件</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#plugins">插件</a></li><li><a href="https://caddyserver.com/docs/v2-upgrade#getting-help">获得帮助</a></li></ul><h2 id="高位🔗"><a href="#高位🔗" class="headerlink" title="高位🔗"></a>高位<a href="https://caddyserver.com/docs/v2-upgrade#high-order-bits">🔗</a></h2><ul><li>“Caddy 2”仍然只是被称为<code>caddy</code>。我们可能会使用“Caddy 2”来阐明哪个版本可以使过渡不那么混乱。</li><li>大多数用户只需要替换他们的<code>caddy</code>二进制文件和更新的<code>Caddyfile</code>配置（在测试它是否有效之后）。</li><li>最好不要从 Caddy 1 继承任何假设进入 Caddy 2。</li><li>您可能无法在 v2 中完美复制您的利基 v1 配置。通常，这是有充分理由的。</li><li>命令行不再用于服务器配置。</li><li>配置不再需要环境变量。</li><li>为 Caddy 2 提供配置的主要方法是通过其<a href="https://caddyserver.com/docs/api">API</a>，但也可以使用<a href="https://caddyserver.com/docs/command-line"><code>caddy</code>命令。</a></li><li>您应该知道 Caddy 2 的原生配置语言是<a href="https://caddyserver.com/docs/json/">JSON</a>，而 Caddyfile 只是另一个为您转换为 JSON 的<a href="https://caddyserver.com/docs/config-adapters">配置适配器</a>。极端自定义/高级用例可能需要 JSON，因为并非所有可能的配置都可以由 Caddyfile 表示。</li><li>Caddyfile 基本相同，但功能更强大；指令已更改。</li></ul><h2 id="脚步🔗"><a href="#脚步🔗" class="headerlink" title="脚步🔗"></a>脚步<a href="https://caddyserver.com/docs/v2-upgrade#steps">🔗</a></h2><ol><li><a href="https://caddyserver.com/docs/getting-started">通过我们的入门</a>教程熟悉 Caddy 2 。</li><li>如果您还没有，请执行第 1 步。说真的——我们不能强调至少知道如何使用 Caddy 2 的重要性。（它更有趣！）</li><li>使用以下指南转换您的<code>caddy</code>命令。</li><li>使用以下指南转换您的 Caddyfile。</li><li>在本地或暂存中测试您的新配置。</li><li>测试，测试，再测试</li><li>部署并玩得开心！</li></ol><h2 id="HTTPS-和端口🔗"><a href="#HTTPS-和端口🔗" class="headerlink" title="HTTPS 和端口🔗"></a>HTTPS 和端口<a href="https://caddyserver.com/docs/v2-upgrade#https-and-ports">🔗</a></h2><p>Caddy 的默认端口不再是<code>:2015</code>. Caddy 2 的默认端口是<code>:443</code>，或者，如果不知道主机名/IP，则为 port <code>:80</code>。您始终可以在配置中自定义端口。</p><p><a href="https://caddyserver.com/docs/automatic-https#overview">如果主机名或 IP 已知</a>， Caddy 2 的默认协议<a href="https://caddyserver.com/docs/automatic-https#overview"><em>始终</em></a>是 HTTPS 。这与 Caddy 1 不同，在 Caddy 1 中，默认情况下只有公开域名使用 HTTPS。现在，<em>每个</em>站点都使用 HTTPS（除非您通过明确指定端口<code>:80</code>或禁用它<code>http://</code>）。</p><p>IP 地址和 localhost 域将从<a href="https://caddyserver.com/docs/automatic-https#local-https">本地受信任的嵌入式 CA</a>颁发证书。所有其他域将使用 ZeroSSL 或 Let’s Encrypt。（这都是可配置的。）</p><p>证书和 ACME 资源的存储结构发生了变化。Caddy 2 可能会为您的站点获得新证书；但是如果您有很多证书，如果它不适合您，您可以手动迁移它们。有关详细信息，请参阅问题<a href="https://github.com/caddyserver/caddy/issues/2955">#2955</a>和<a href="https://github.com/caddyserver/caddy/issues/3124">#3124</a>。</p><h2 id="命令行🔗"><a href="#命令行🔗" class="headerlink" title="命令行🔗"></a>命令行<a href="https://caddyserver.com/docs/v2-upgrade#command-line">🔗</a></h2><p><code>caddy</code>命令现在是<code>caddy run</code>.</p><p>所有命令行标志都是不同的。删除它们；所有服务器配置现在都存在于实际配置文档中（通常是 Caddyfile 或 JSON）。<a href="https://caddyserver.com/docs/json/">您可能会在JSON 结构</a>或<a href="https://caddyserver.com/docs/caddyfile/options">Caddyfile 全局选项</a>中找到您需要的内容，以替换 v1.1 中的大多数命令行标志。</p><p>像这样的命令<code>caddy -conf ../Caddyfile</code>会变成<code>caddy run --config ../Caddyfile</code>.</p><p>和以前一样，如果您的 Caddyfile 在当前文件夹中，Caddy 会自动找到并使用它；在这种情况下，您不需要使用该<code>--config</code>标志。</p><p>信号基本相同，只是不再支持 USR1 和 USR2。请改用<a href="https://caddyserver.com/docs/command-line#caddy-reload"><code>caddy reload</code></a>命令或<a href="https://caddyserver.com/docs/api">API</a>来加载新配置。</p><p>在没有任何配置的情况下运行<code>caddy</code>用于运行简单的文件服务器。Caddy 2 中的等价物是<a href="https://caddyserver.com/docs/command-line#caddy-file-server"><code>caddy file-server</code></a>.</p><p>环境变量不再相关，除了<code>HOME</code>（并且，可选地，<code>XDG_*</code>您设置的任何变量）。<code>CADDYPATH</code>被<a href="https://caddyserver.com/docs/conventions#file-locations">操作系统约定所</a>取代。</p><h2 id="球童档案🔗"><a href="#球童档案🔗" class="headerlink" title="球童档案🔗"></a>球童档案<a href="https://caddyserver.com/docs/v2-upgrade#caddyfile">🔗</a></h2><p><a href="https://caddyserver.com/docs/caddyfile/concepts">v2 Caddyfile</a>与您已经熟悉的非常相似。您需要做的主要事情是更改指令。</p><p>⚠️<strong>请务必阅读新指令！</strong>特别是如果您的配置更高级，则需要考虑许多细微差别。这些技巧可以让你快速切换，但请阅读每个指令的完整文档，以便了解升级的含义。当然，在将它们投入生产之前，请务必彻底测试您的配置。</p><h3 id="主要变化🔗"><a href="#主要变化🔗" class="headerlink" title="主要变化🔗"></a>主要变化<a href="https://caddyserver.com/docs/v2-upgrade#primary-changes">🔗</a></h3><ul><li>如果你提供静态文件，你需要添加一个<a href="https://caddyserver.com/docs/caddyfile/directives/file_server"><code>file_server</code>指令</a>，因为 Caddy 2 默认不假设这个。出于安全原因，默认情况下 Caddy 2 也不嗅探 MIME。如果缺少 Content-Type，您可能需要使用<a href="https://caddyserver.com/docs/caddyfile/directives/header">header</a>指令自己设置标头。</li><li>在 v1 中，您只能按请求路径过滤（或“匹配”）指令。在 v2 中，<a href="https://caddyserver.com/docs/caddyfile/matchers">请求匹配</a>功能更加强大。任何向 HTTP 处理程序链添加中间件或以任何方式操纵 HTTP 请求/响应的 v2 指令都利用了这个新的匹配功能。<a href="https://caddyserver.com/docs/caddyfile/matchers">阅读有关 v2 请求匹配器的更多信息。</a>您需要了解它们才能理解 v2 Caddyfile。</li><li>尽管许多<a href="https://caddyserver.com/docs/conventions#placeholders">占位符</a>是相同的，但许多已更改，现在有<a href="https://caddyserver.com/docs/modules/http#docs">许多新</a>占位符，包括<a href="https://caddyserver.com/docs/caddyfile/concepts#placeholders">Caddyfile 的简写</a>。</li><li>Caddy 2 的日志都是结构化的，默认格式是 JSON。所有日志级别都可以简单地转到要处理的同一日志（但如果需要，您可以自定义）。</li><li>在 Caddy 1 中通过路径前缀匹配请求的情况下，现在默认情况下 Caddy 2 中的路径匹配是精确的。如果要匹配类似 的前缀<code>/foo/</code>，则需要<code>/foo/*</code>在 Caddy 2 中匹配。</li></ul><p>我们将在这里列出一些最常见的 v1 指令，并描述如何转换它们以在 v2 Caddyfile 中使用。</p><p>⚠️<strong>仅仅因为此页面缺少 v1 指令并不意味着 v2 不能做到！</strong>一些 v1 指令不需要，翻译不好，或者在 v2 中以其他方式实现。对于一些高级定制，您可能需要下拉到 JSON 以获得您想要的。浏览<a href="https://caddyserver.com/docs/caddyfile">我们的文档</a>以找到您需要的内容！</p><h3 id="基本认证🔗"><a href="#基本认证🔗" class="headerlink" title="基本认证🔗"></a>基本认证<a href="https://caddyserver.com/docs/v2-upgrade#basicauth">🔗</a></h3><p>HTTP 基本身份验证仍使用该<a href="https://caddyserver.com/docs/caddyfile/directives/basicauth"><code>basicauth</code></a>指令进行配置。但是，Caddy 2 配置不接受明文密码。您必须对它们进行哈希处理，这<a href="https://caddyserver.com/docs/command-line#caddy-hash-password"><code>caddy hash-password</code></a>可以提供帮助。</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">basicauth <span class="hljs-regexp">/secret/</span> Bob hiccup<br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">basicauth <span class="hljs-regexp">/secret/</span>* &#123;<br>Bob JDJhJDEwJEVCNmdaNEg2Ti5iejRMYkF3MFZhZ3VtV3E1SzBWZEZ5Q3VWc0tzOEJwZE9TaFlZdEVkZDhX<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="浏览🔗"><a href="#浏览🔗" class="headerlink" title="浏览🔗"></a>浏览<a href="https://caddyserver.com/docs/v2-upgrade#browse">🔗</a></h3><p>现在通过<a href="https://caddyserver.com/docs/caddyfile/directives/file_server"><code>file_server</code></a>指令启用文件浏览。</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">browse <span class="hljs-regexp">/subfolder/</span><br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file_server <span class="hljs-regexp">/subfolder/</span>* browse<br></code></pre></td></tr></table></figure><h3 id="错误🔗"><a href="#错误🔗" class="headerlink" title="错误🔗"></a>错误<a href="https://caddyserver.com/docs/v2-upgrade#errors">🔗</a></h3><p>自定义错误页面可以使用<a href="https://caddyserver.com/docs/caddyfile/directives/handle_errors"><code>handle_errors</code></a>.</p><ul><li><strong>v1:</strong> :</li></ul><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">errors &#123;<br><span class="hljs-number">404 404</span>.html<br><span class="hljs-number">500 500</span>.html<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>v2:</strong> :</li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl">handle_errors &#123;<br>rewrite * /&#123;<span class="hljs-keyword">http</span>.<span class="hljs-keyword">error</span>.status_code&#125;.html<br>file_server<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分机🔗"><a href="#分机🔗" class="headerlink" title="分机🔗"></a>分机<a href="https://caddyserver.com/docs/v2-upgrade#ext">🔗</a></h3><p>隐含的文件扩展名可以用<a href="https://caddyserver.com/docs/caddyfile/directives/try_files"><code>try_files</code></a>.</p><ul><li><strong>v1：</strong> <code>ext .html</code></li><li><strong>v2：</strong> <code>try_files &#123;path&#125;.html &#123;path&#125;</code></li></ul><h3 id="快速cgi🔗"><a href="#快速cgi🔗" class="headerlink" title="快速cgi🔗"></a>快速cgi<a href="https://caddyserver.com/docs/v2-upgrade#fastcgi">🔗</a></h3><p>假设您正在使用 PHP，则 v2 等效项是<a href="https://caddyserver.com/docs/caddyfile/directives/php_fastcgi"><code>php_fastcgi</code></a>.</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fastcgi</span> / localhost:<span class="hljs-number">9005</span> php<br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">php_fastcgi</span> localhost:<span class="hljs-number">9005</span><br></code></pre></td></tr></table></figure><p>请注意，<code>fastcgi</code>v1 中的指令在后台做了很多工作，包括尝试磁盘上的文件、重写请求，甚至重定向。v2<code>php_fastcgi</code>指令也为您做这些事情，但文档提供了<a href="https://caddyserver.com/docs/caddyfile/directives/php_fastcgi#expanded-form">扩展形式</a>，如果您的要求不同，您可以对其进行修改。</p><p><code>php</code>v2中不需要预设，因为该<code>php_fastcgi</code>指令默认采用 PHP。诸如此类的行<code>php_fastcgi 127.0.0.1:9000 php</code>会导致反向代理认为有第二个后端称为<code>php</code>，从而导致连接错误。</p><p>v2 中的子指令不同——您可能不需要任何 PHP 指令。</p><h3 id="压缩包🔗"><a href="#压缩包🔗" class="headerlink" title="压缩包🔗"></a>压缩包<a href="https://caddyserver.com/docs/v2-upgrade#gzip">🔗</a></h3><p>现在，一个指令<a href="https://caddyserver.com/docs/caddyfile/directives/encode"><code>encode</code></a>用于所有响应编码，包括多种压缩格式。</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gzip</span><br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">encode gzip</span><br></code></pre></td></tr></table></figure><p>有趣的事实：Caddy 2 也支持<code>zstd</code>（但还没有浏览器支持）。</p><h3 id="标题🔗"><a href="#标题🔗" class="headerlink" title="标题🔗"></a>标题<a href="https://caddyserver.com/docs/v2-upgrade#header">🔗</a></h3><p><a href="https://caddyserver.com/docs/caddyfile/directives/header">大部分没有改变</a>，但现在更强大，因为它可以在 v2 中进行子字符串替换。</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">header</span> / <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> max-age=<span class="hljs-number">31536000</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">header</span> <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> max-age=<span class="hljs-number">31536000</span>;<br></code></pre></td></tr></table></figure><h3 id="日志🔗"><a href="#日志🔗" class="headerlink" title="日志🔗"></a>日志<a href="https://caddyserver.com/docs/v2-upgrade#log">🔗</a></h3><p>启用访问记录；该<a href="https://caddyserver.com/docs/caddyfile/directives/log"><code>log</code></a>指令仍然可以在 v2 中使用，但默认情况下，所有日志都是结构化的，编码为 JSON。</p><p>启用访问日志的推荐方法很简单：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>它将结构化日志发送到标准错误。（您也可以发送到文件或网络套接字；请参阅<a href="https://caddyserver.com/docs/caddyfile/directives/log"><code>log</code></a>指令文档。）</p><p>默认情况下，日志将采用<a href="https://caddyserver.com/docs/logging">结构化</a>JSON 格式。如果由于遗留原因您仍然需要通用日志格式 (CLF) 的日志，您可以使用该<a href="https://github.com/caddyserver/transform-encoder"><code>transform-encoder</code></a>插件。</p><h3 id="代理🔗"><a href="#代理🔗" class="headerlink" title="代理🔗"></a>代理<a href="https://caddyserver.com/docs/v2-upgrade#proxy">🔗</a></h3><p>v2 等效项是<a href="https://caddyserver.com/docs/caddyfile/directives/reverse_proxy"><code>reverse_proxy</code></a>.</p><p>显着的子指令变化分别为<code>header_upstream</code>和；和负载平衡相关的子指令以 . 为前缀。<code>header_downstream``header_up``header_down``lb_</code></p><p>另一个显着的区别是 v2 代理默认通过所有传入的标头（包括<code>Host</code>标头）并设置<code>X-Forwarded-For</code>标头。换句话说，v1 的“透明”模式基本上是 v2 中的默认模式（但如果您需要 X-Real-IP 等其他标头，则必须自己设置）。您仍然可以<code>Host</code>使用<code>header_up</code>子指令覆盖/自定义标头。</p><p>Websocket 代理在 v2 中“正常工作”；无需像 v1 那样“启用”websocket。</p><p>由于改进的匹配器支持，v2 中不再需要<a href="https://caddyserver.com/docs/v2-upgrade#rewrite">重写黑客</a>，因此<code>without</code>子指令已被删除。</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxy</span> / localhost:<span class="hljs-number">9005</span><br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">reverse_proxy</span> localhost:<span class="hljs-number">9005</span><br></code></pre></td></tr></table></figure><h3 id="重新目录🔗"><a href="#重新目录🔗" class="headerlink" title="重新目录🔗"></a>重新目录<a href="https://caddyserver.com/docs/v2-upgrade#redir">🔗</a></h3><p><a href="https://caddyserver.com/docs/caddyfile/directives/redir">不变</a>，除了一些关于可选状态码参数的细节。大多数配置不需要进行任何更改。</p><ul><li><strong>v1：</strong> <code>redir https://example.com&#123;uri&#125;</code></li><li><strong>v2：</strong> <code>redir https://example.com&#123;uri&#125;</code></li></ul><h3 id="改写🔗"><a href="#改写🔗" class="headerlink" title="改写🔗"></a>改写<a href="https://caddyserver.com/docs/v2-upgrade#rewrite">🔗</a></h3><p>请求重写（“内部重定向”）的语义略有改变。如果您在 v1 中使用所谓的“rewrite hack”作为匹配请求而不是简单路径前缀的方式，那么在 v2 中这是完全没有必要的。</p><p>新<a href="https://caddyserver.com/docs/caddyfile/directives/rewrite">指令非常简单但非常强大，因为它</a><a href="https://caddyserver.com/docs/caddyfile/directives/rewrite">的<code>rewrite</code></a>大部分复杂性都由v2 中的<a href="https://caddyserver.com/docs/caddyfile/matchers">匹配器处理：</a></p><ul><li><strong>v1：</strong></li></ul><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">rewrite</span> &#123;<br><span class="hljs-keyword">if</span> &#123;&gt;User-Agent&#125; <span class="hljs-keyword">has</span> <span class="hljs-keyword">mobile</span><br><span class="hljs-keyword">to</span> /mobile&#123;uri&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mobile</span> &#123;<br><span class="hljs-selector-tag">header</span> User-Agent *mobile*<br>&#125;<br>rewrite <span class="hljs-keyword">@mobile</span> /mobile&#123;uri&#125;<br></code></pre></td></tr></table></figure><p>请注意我们如何简单地使用 Caddy 2 的常用<a href="https://caddyserver.com/docs/caddyfile/matchers">匹配器令牌</a>；它不再是该指令的特例。</p><p>首先删除所有重写黑客；将它们变成<a href="https://caddyserver.com/docs/caddyfile/concepts#named-matchers">命名匹配器</a>。评估每个 v1<code>rewrite</code>以查看 v2 中是否真的需要它。提示：<code>rewrite</code>用于添加路径前缀然后删除相同前缀<code>proxy</code>的v1 Caddyfile<code>without</code>是一种重写技巧，可以被消除。</p><p>您可能会发现新的<a href="https://caddyserver.com/docs/caddyfile/directives/route"><code>route</code></a>和<a href="https://caddyserver.com/docs/caddyfile/directives/handle"><code>handle</code></a>指令对于更好地控制高级路由逻辑很有用。</p><h3 id="根🔗"><a href="#根🔗" class="headerlink" title="根🔗"></a>根<a href="https://caddyserver.com/docs/v2-upgrade#root">🔗</a></h3><p><a href="https://caddyserver.com/docs/caddyfile/directives/root">未更改</a>，但如果您的根路径以 开头<code>/</code>，则需要添加<code>*</code>匹配器标记以将其与<a href="https://caddyserver.com/docs/caddyfile/concepts#path-matchers">路径匹配器</a>区分开来。</p><ul><li><strong>v1：</strong> <code>root /var/www</code></li><li><strong>v2：</strong> <code>root * /var/www</code></li></ul><p>因为它接受 v2 中的匹配器，这意味着您还可以根据请求更改站点根目录。</p><p>如果提供静态文件，请记住添加<a href="https://caddyserver.com/docs/caddyfile/directives/file_server"><code>file_server</code>指令</a>，因为默认情况下 Caddy 2 不假设这一点，而在 v1 中始终启用它。</p><h3 id="状态🔗"><a href="#状态🔗" class="headerlink" title="状态🔗"></a>状态<a href="https://caddyserver.com/docs/v2-upgrade#status">🔗</a></h3><p>v2 等效的是<a href="https://caddyserver.com/docs/caddyfile/directives/respond"><code>respond</code></a>，它也可以写一个响应体。</p><ul><li><strong>v1：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">status <span class="hljs-number">404</span> <span class="hljs-regexp">/secrets/</span><br></code></pre></td></tr></table></figure><ul><li><strong>v2：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">respond <span class="hljs-regexp">/secrets/</span>* <span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><h3 id="模板🔗"><a href="#模板🔗" class="headerlink" title="模板🔗"></a>模板<a href="https://caddyserver.com/docs/v2-upgrade#templates">🔗</a></h3><p>指令的整体语法<a href="https://caddyserver.com/docs/caddyfile/directives/templates"><code>templates</code></a>没有改变，但实际的模板动作/功能是不同的并且有很大的改进。例如，模板能够包含文件、渲染 markdown、制作内部子请求、解析前端内容等等！</p><p><a href="https://caddyserver.com/docs/modules/http.handlers.templates">有关新功能的详细信息，请参阅文档</a>。</p><ul><li><strong>v1：</strong> <code>templates</code></li><li><strong>v2：</strong> <code>templates</code></li></ul><h3 id="tls🔗"><a href="#tls🔗" class="headerlink" title="tls🔗"></a>tls<a href="https://caddyserver.com/docs/v2-upgrade#tls">🔗</a></h3><p>该<a href="https://caddyserver.com/docs/caddyfile/directives/tls"><code>tls</code></a>指令的基本原理没有改变，例如指定您自己的证书和密钥：</p><ul><li><strong>v1：</strong> <code>tls cert.pem key.pem</code></li><li><strong>v2：</strong> <code>tls cert.pem key.pem</code></li></ul><p>但是 Caddy 的<a href="https://caddyserver.com/docs/automatic-https">自动 HTTPS 逻辑</a> <em>已经</em>改变，所以要注意这一点！</p><p>密码套件名称也发生了变化。</p><p>Caddy 2 中的一个常见配置是使用<code>tls internal</code>它为非开发主机名<code>localhost</code>或 IP 地址提供本地受信任的证书。</p><p>大多数网站根本不需要这个指令。</p><h2 id="服务文件🔗"><a href="#服务文件🔗" class="headerlink" title="服务文件🔗"></a>服务文件<a href="https://caddyserver.com/docs/v2-upgrade#service-files">🔗</a></h2><p>我们建议使用<a href="https://caddyserver.com/docs/running#linux-service">我们的官方 systemd 服务文件</a>之一进行 Caddy 部署。</p><p>如果您需要自定义服务文件，请以我们的为基础。出于充分的理由，他们已经仔细调整过！如果需要，请务必自定义您的。</p><h2 id="插件🔗"><a href="#插件🔗" class="headerlink" title="插件🔗"></a>插件<a href="https://caddyserver.com/docs/v2-upgrade#plugins">🔗</a></h2><p>为 v1 编写的插件不会自动与 v2 兼容。v2 甚至不需要许多 v1 插件。另一方面，v2 比 v1 更容易扩展和灵活！</p><p>如果您想为 Caddy 2 编写插件，请<a href="https://caddyserver.com/docs/extending-caddy">学习如何编写 Caddy 模块</a>。</p><h3 id="使用插件构建-Caddy-2🔗"><a href="#使用插件构建-Caddy-2🔗" class="headerlink" title="使用插件构建 Caddy 2🔗"></a>使用插件构建 Caddy 2<a href="https://caddyserver.com/docs/v2-upgrade#building-caddy-2-with-plugins">🔗</a></h3><p>Caddy 2 可以在<a href="https://caddyserver.com/download">交互式下载页面</a>通过插件下载。或者，您可以使用<a href="https://caddyserver.com/docs/build">自己构建 Caddy</a><code>xcaddy</code>并选择要包含的插件。<code>xcaddy</code>自动执行 Caddy 的<a href="https://github.com/caddyserver/caddy/blob/master/cmd/caddy/main.go">main.go</a>文件中的指令。</p><h2 id="获得帮助🔗"><a href="#获得帮助🔗" class="headerlink" title="获得帮助🔗"></a>获得帮助<a href="https://caddyserver.com/docs/v2-upgrade#getting-help">🔗</a></h2><p>如果您难以让 Caddy 正常工作，请先浏览我们的网站以获取文档。花时间尝试新事物并了解正在发生的事情 - v2 在很多方面与 v1 非常不同（但也非常熟悉）！</p><p>如果您仍然需要帮助，请加入<a href="https://caddy.community/">我们的社区</a>！您可能会发现帮助他人也是帮助自己的最佳方式。</p><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><ol><li>部署静态网页</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx">http://yousite.<span class="hljs-section">com</span> &#123;<br><span class="hljs-attribute">encode</span> gzip <span class="hljs-comment"># gzip压缩</span><br>root * /var/web/wwwroot <span class="hljs-comment"># web根目录</span><br>file_server browse  <span class="hljs-comment"># 启动静态资源</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​    注意，如果配置根目录下有index.html文件，则会自动部署为静态网页，如果没有则为由Caddy提供的文件共享的浏览网页如下。</p><ol start="2"><li>部署File_server</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">yousite.<span class="hljs-section">com</span> &#123;<br>   <span class="hljs-attribute">root</span> * /var/share <span class="hljs-comment">#根目录</span><br>   file_server browse <span class="hljs-comment">#启动web文件服务</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>反向代理</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx">yousite.<span class="hljs-section">com</span> &#123;<br>     <span class="hljs-attribute">reverse_proxy</span> localhost:<span class="hljs-number">8082</span> <span class="hljs-comment">#反向代理</span><br>&#125;<br>    <br></code></pre></td></tr></table></figure><ol start="4"><li><p>部署</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">caddy</span> adapt  <span class="hljs-comment">## 加载配置文件</span><br><br>caddy fmt <span class="hljs-comment">## 格式化配置</span><br><br>caddy start  <span class="hljs-comment">## 启动服务</span><br></code></pre></td></tr></table></figure><p>注意，如果为重新部署，请将最后一句start换为 <code>caddy reload</code></p></li></ol><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ol><li><a href="https://caddyserver.com/docs/v2-upgrade">Caddyserver Document</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>集美大学校园网绑定/认证报错异常及解决方案</title>
    <link href="/p/3471e027.html"/>
    <url>/p/3471e027.html</url>
    
    <content type="html"><![CDATA[<p>title: 校园网绑定/认证报错异常及解决方案<br>date: 2022-04-03 08:23:46<br>tags:</p><h2 id="用户不允许在本地区使用该服务"><a href="#用户不允许在本地区使用该服务" class="headerlink" title="用户不允许在本地区使用该服务"></a>用户不允许在本地区使用该服务</h2><blockquote><p>解释：该上网账号不能在这里进行认证。</p></blockquote><p>解决方法：</p><p>情况1：未开户情况下在宿舍使用网络。<br>解决方法：校园网上网账户需要开通（见上文”开户”），或者使用舍友已经开户了的上网账户。<br>情况2：在部分教学区域使用宽带服务。<br>解决方法：部分公共场所校园网仅允许使用教育网，请将服务切换为”教育网接入”。</p><h2 id="用户不允许使用本服务"><a href="#用户不允许使用本服务" class="headerlink" title="用户不允许使用本服务"></a>用户不允许使用本服务</h2><blockquote><p>解释：绑定了宽带但是没有开户的情况下选择宽带接入认证。</p></blockquote><p>解决方法：按着上文的方法开户校园网账户，或者解除绑定后绑定到有开户的校园网账户上。</p><p><strong>不在认证时间段内！</strong> </p><p>解释：断网了，参考上文说明。</p><p>解决方法：洗洗睡，等待次日6:00通网。</p><h2 id="radius-server-not-message"><a href="#radius-server-not-message" class="headerlink" title="radius server not message"></a>radius server not message</h2><blockquote><p>解释：认证服务无信息。</p></blockquote><p>解决方法：</p><p>情况1：多点击连接几次，就认证上了</p><p>情况2：多次点击仍然提示</p><p>用那张电信卡打10000-转人工服务 把报错告诉对方，叫对方反馈给技术人员。<br>说：你好，我是集美大学电信校园网用户，今天认证宽带的时候提示 运营商用户认证失败，失败原因是radius server not message（不会念去百度一下，大学生了），请帮我反馈给技术人员！如果问宿舍号就告诉他们留存。如果对方不认账就叫他反馈给工作人员就行了，其他不要管！<br>等电信回电话告诉解决了再尝试认证登录。</p><p>情况3：多次点击认证后出现其他报错，请按下文的方法解决！</p><h2 id="RADIUS-0011-The-current-number-of-connections-has-reached-the-set-number-of-connections"><a href="#RADIUS-0011-The-current-number-of-connections-has-reached-the-set-number-of-connections" class="headerlink" title="RADIUS-0011: The current number of connections has reached the set number of connections."></a>RADIUS-0011: The current number of connections has reached the set number of connections.</h2><blockquote><p>解释：当前在线连接数已达到最大限制。</p></blockquote><p>解决方法：此问题为电信宽带专属，出现在断电恢复后重新认证时，原因是宽带账户被挂着没有下线，与上一个报错类似，用那张电信卡打10000-转人工服务<br>说：你好，我是集美大学电信校园网用户，认证提示0011错误，麻烦反馈给工程师，对方登记一下宿舍楼宿舍号即可。<br>如果部分客服不了解情况踢皮球说不归他们管就吼他们，叫他们帮忙登记下来反馈给工程师即可（实测有效）！<br>等电信回电话告诉解决了再尝试认证登录。</p><h2 id="RADIUS-0017-Not-meet-the-conditions-of-PVC-bindings"><a href="#RADIUS-0017-Not-meet-the-conditions-of-PVC-bindings" class="headerlink" title="RADIUS-0017: Not meet the conditions of PVC bindings."></a>RADIUS-0017: Not meet the conditions of PVC bindings.</h2><blockquote><p>解释：未符合管道绑定条件。</p></blockquote><p>解决方法：大部分情况下是运营商没激活宽带，请联系运营商人工客服或者去校园里的营业厅解决。或者是当初卖卡的没有给用户开通激活宽带，或者把宽带开通到其他学校去了，请携带身份证前往月明楼二楼电信营业厅将报错截图给工作人员请求处理。  RADIUS-0019: Password invalid.  解释：宽带密码（不是集大通行证密码）不正确， </p><p>解决方法：请使用正确的宽带密码绑定宽带。</p><p>在绑定时报错：说明是可能是输入错误，也可能发生了变更，请按照上文的方法正确获取宽带密码，或者打电话、前往营业厅。</p><p>在认证时报错：移动专属问题，移动系统将用户密码重置变更了，解决方法：</p><p>2019年9月底移动重置了新卡的宽带密码，导致认证出错，需要下文的方法进入网上营业厅重新绑定后方可正常登录。</p><p>使用移动宽带校园网，认证时提示Invalid password怎么办？</p><ol><li><p>用那张移动卡发送短信 401#手机号# 到 10086 重置宽带密码。</p></li><li><p>你将获得新宽带密码，记下密码。</p></li><li><p>在内网环境下（比如说宿舍网教育网接入，或者在图书馆、机房里使用公用校园网）进入赛尔网络（集大）网上营业厅（必须是电脑版）。</p><p>  方法一：<br>  进入<a href="http://user.jmu.edu.cn/SelfService/home.aspx">http://user.jmu.edu.cn/SelfService/home.aspx</a></p><p>  方法二：</p></li></ol><p>电脑端：搜索集美大学信息化中心官网，接着再点击学生宿舍网进入。<br>手机端：进入集大通/OpenJMU里的网费充值/网上营业厅后再点击下面的”电脑版”进入。 </p><ol start="4"><li><p>输入集大通行证的账号和密码，然后点开账号管理-宽带绑定，点击解除绑定，接着再点击宽带绑定，选择移动-输入移动手机号和新的宽带密码-输入两遍，再点击绑定即可！</p></li><li><p>在宿舍里先下线一下再进行移动宽带认证，浏览器地址栏输入10.8.2.2进入点击下线后再重新认证，选择移动宽带接入，用客户端在客户端里点下线再选移动接入，使用自动登录路由器的重启路由器。</p></li></ol><h2 id="RADIUS-0020-Wired-service-disabled"><a href="#RADIUS-0020-Wired-service-disabled" class="headerlink" title="RADIUS-0020:Wired service disabled"></a>RADIUS-0020:Wired service disabled</h2><blockquote><p>解释：联网服务禁用。</p></blockquote><p>解决方法：电信专属问题，可能是宽带没有激活，或者是手机卡套餐里没有宽带服务，请前往电信营业厅说绑定（或者认证时）时遇到了0020报错，把截图给工作人员看工作人员。</p><h2 id="RADIUS-0024-User-name-or-service-inexistent"><a href="#RADIUS-0024-User-name-or-service-inexistent" class="headerlink" title="RADIUS-0024: User name or service inexistent."></a>RADIUS-0024: User name or service inexistent.</h2><p>解释：用户名或服务不存在。<br>解决方法：请检查是否输入了正确的宽带账号，以及该账户是否开通了宽带业务。 </p><h2 id="RADIUS-0025-Service-unavailable"><a href="#RADIUS-0025-Service-unavailable" class="headerlink" title="RADIUS-0025: Service unavailable."></a>RADIUS-0025: Service unavailable.</h2><blockquote><p>解释：服务不可用。</p></blockquote><p>解决方法：请检查宽带账户所属的手机卡是否正常使用、是否停机、是否欠费，另外很大可能是运营商没有开通宽带，请按照上文”准备一个宽带账户”中的解决方法来处理。</p><h2 id="运营商用户认证失败！失败原因-26-User-你的宽带账号-xmjmu-‘s-service-aDSLPPPoEAuthen-1001-is-Locked，-Request-Deny-by-fjfz-cnuinet-net"><a href="#运营商用户认证失败！失败原因-26-User-你的宽带账号-xmjmu-‘s-service-aDSLPPPoEAuthen-1001-is-Locked，-Request-Deny-by-fjfz-cnuinet-net" class="headerlink" title="运营商用户认证失败！失败原因 [26;User(你的宽带账号@xmjmu) ‘s service aDSLPPPoEAuthen(1001) is Locked， Request Deny by fjfz.cnuinet.net ]"></a>运营商用户认证失败！失败原因 [26;User(你的宽带账号@xmjmu) ‘s service aDSLPPPoEAuthen(1001) is Locked， Request Deny by fjfz.cnuinet.net ]</h2><blockquote><p>解释：该用户的宽带认证服务被锁，福建福州中国联通请求拒绝。</p></blockquote><p>解决方法：联通专属问题，大规模爆发于2020年8月。<br>请先检查联通电话卡是否欠费或者被注销（可以用联通营业厅APP查询），如果有请补齐话费或者前往月明楼二楼营业厅申请恢复。话费充值可能会延迟，请等待一段时间再尝试登陆。<br>如果电话卡有话费但是仍然报错，请直接前往联通营业厅，将报错截图给工作人员看，帮忙解决。<br>如果宽带密码被工作人员重置了，请在内网环境下（比如说宿舍网教育网接入，或者在图书馆、机房里使用公用校园网）进入赛尔网络（集大）网上营业厅（必须是电脑版）。</p><p>进入方法：</p><ol><li><p>方法一：<br>直接进入链接：<br><a href="http://user.jmu.edu.cn/SelfService/home.aspx">http://user.jmu.edu.cn/SelfService/home.aspx</a></p></li><li><p>方法二：<br>电脑端：搜索集美大学信息化中心官网，接着再点击学生宿舍网进入。<br>手机端：进入集大通/OpenJMU里的网费充值/网上营业厅后再点击下面的”电脑版”进入。<br>输入绑定了联通宽带的集大通行证的账号和密码，然后点开账号管理-宽带绑定，如果卡是2019年8月及之后办理的，联通的宽带账号为0592开头，并不是手机号，解除绑定前最好复制一下宽带账号，然后点击解除绑定，接着再点击宽带绑定，选择联通-输入联通宽带账号和新的宽带密码-输入两遍，再点击绑定即可！<br>在宿舍里先下线一下再进行联通宽带接入认证，浏览器地址栏输入10.8.2.2进入点击下线后再重新认证，选择联通宽带接入，用客户端在客户端里点下线再选联通宽带接入，使用自动登录路由器的重启路由器。</p></li></ol><h2 id="运营商用户认证失败！失败原因-29-User-你的宽带账号-xmjmu-‘s-Authen-Attrib-ai-Senvice-Password-Check-Eror-Request-Deny-by-fjfz-cnuninet-net"><a href="#运营商用户认证失败！失败原因-29-User-你的宽带账号-xmjmu-‘s-Authen-Attrib-ai-Senvice-Password-Check-Eror-Request-Deny-by-fjfz-cnuninet-net" class="headerlink" title="运营商用户认证失败！失败原因 [29;User(你的宽带账号@xmjmu) ‘s Authen Attrib(ai-Senvice-Password)Check Eror,Request Deny by fjfz.cnuninet.net ]"></a>运营商用户认证失败！失败原因 [29;User(你的宽带账号@xmjmu) ‘s Authen Attrib(ai-Senvice-Password)Check Eror,Request Deny by fjfz.cnuninet.net ]</h2><blockquote><p>解释：联通的宽带密码错误。</p></blockquote><p>解决方法：联通专属问题</p><ol><li><p>情况一，绑定联通宽带时报错：<br>先检查一下你的宽带密码是否输入错误，联通可能会重置宽带密码，请直接前往联通营业厅咨询宽带密码后再绑定。</p></li><li><p>情况二，认证联通宽带接入时报错：<br>说明宽带密码被重置了，请直接前往联通营业厅咨询新的宽带密码。</p></li></ol><p>绑定：进入网上营业厅电脑版，输入绑定了联通宽带的集大通行证的账号和密码，然后点开账号管理-宽带绑定，如果卡是2019年8月及之后办理的，联通的宽带账号为0592开头，并不是手机号，解除绑定前最好复制一下宽带账号，然后点击解除绑定，接着再点击宽带绑定，选择联通-输入联通宽带账号和新的宽带密码-输入两遍，再点击绑定即可！</p><h2 id="运营商用户认证失败！失败原因-User-status-error"><a href="#运营商用户认证失败！失败原因-User-status-error" class="headerlink" title="运营商用户认证失败！失败原因 [User status error ]"></a>运营商用户认证失败！失败原因 [User status error ]</h2><blockquote><p>解释：用户状态错误</p></blockquote><p>解决方法：移动专属问题，大规模爆发于2020年9月之后，请直接前往移动营业厅，把报错截图给工作人员看解决。</p><p>如果宽带密码被重置了，请：</p><p>进入赛尔网络（集大）网上营业厅（必须是电脑版）。<br>进入方法： </p><ol><li><p>方法一：<br>进入 <a href="http://user.jmu.edu.cn/SelfService/home.aspx">http://user.jmu.edu.cn/SelfService/home.aspx</a></p></li><li><p>方法二：<br>电脑端：搜索集美大学信息化中心官网，接着再点击学生宿舍网进入。<br>手机端：进入集大通/OpenJMU里应用中心的网费充值/网上营业厅后再点击下面的”电脑版”进入。<br>④输入集大通行证的账号和密码，然后点开账号管理-宽带绑定，点击解除绑定，接着再点击宽带绑定，选择移动-输入移动手机号和新的宽带密码-输入两遍，再点击绑定即可！</p></li></ol><h2 id="绑定宽带时：运营商账号校验超时，请稍后再试！"><a href="#绑定宽带时：运营商账号校验超时，请稍后再试！" class="headerlink" title="绑定宽带时：运营商账号校验超时，请稍后再试！"></a>绑定宽带时：运营商账号校验超时，请稍后再试！</h2><h2 id="认证时：无反应，或者提示-认证设备相应超时，请稍后再试！"><a href="#认证时：无反应，或者提示-认证设备相应超时，请稍后再试！" class="headerlink" title="认证时：无反应，或者提示 认证设备相应超时，请稍后再试！"></a>认证时：无反应，或者提示 认证设备相应超时，请稍后再试！</h2><blockquote><p>解释：联通认证服务器无响应</p></blockquote><p>解决方法：联通专属问题，集美大学的联通服务器老旧，经常性抽风，等待恢复。</p><h2 id="空宽带"><a href="#空宽带" class="headerlink" title="空宽带"></a>空宽带</h2><blockquote><p>空宽带问题：办理了校园宽带，也绑定成功了宽带，也认证成功了，但是查IP显示是教育网的IP，测速也是教育网的速度，只有1Mbps，很卡，等于说宽带接入是空的，实际上用了教育网接入；这个问题的威力在于，绑定认证都是很正常的，没有任何的报错提示，然而在使用的时候会感到非常卡顿，用户往往会不知所措；</p></blockquote><blockquote><p>解释：这个说明是宽带加速包的问题，运营商没有弄好，经常会出现在移动宽带上（办理了超过标称50M的宽带或者非集大校园宽带）。</p></blockquote><p>解决方法：前往校内的营业厅，描述清楚问题，就说已经绑定成功了宽带，也认证成功了宽带，测速查IP还是教育网的，最好出示一下测速截图、查IP截图，叫工作人员帮忙解决一下，或者直接打电话给电信客服。</p><h3 id="网站分享"><a href="#网站分享" class="headerlink" title="网站分享"></a>网站分享</h3><ol><li> <strong>网费充值<a href="http://user.jmu.edu.cn/SelfService/Home.aspx">http://user.jmu.edu.cn/SelfService/Home.aspx</a></strong></li><li> <strong>测速网站 <a href="https://www.speedtest.cn/">https://www.speedtest.cn/</a></strong></li><li> <strong>信息化中心 <a href="https://net.jmu.edu.cn/">https://net.jmu.edu.cn</a></strong></li><li> <strong>I集大 <a href="https://i.jmu.edu.cn/">https://i.jmu.edu.cn/</a></strong></li></ol><h2 id="特殊声明"><a href="#特殊声明" class="headerlink" title="特殊声明"></a>特殊声明</h2><p><strong>本文地址</strong>：<a href="https://billyme.gitee.io/">https://billyme.gitee.io/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ISS HD Live</title>
    <link href="/p/d69db4c5.html"/>
    <url>/p/d69db4c5.html</url>
    
    <content type="html"><![CDATA[<h2 id="实时位置"><a href="#实时位置" class="headerlink" title="实时位置"></a>实时位置</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://isstracker.spaceflight.esa.int/&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;625&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;350&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="直播视频"><a href="#直播视频" class="headerlink" title="直播视频"></a>直播视频</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;960&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;540&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.ustream.tv/embed/17074538&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">allowfullscreen</span> <span class="hljs-attr">webkitallowfullscreen</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 0 none transparent;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><iframe src="https://isstracker.spaceflight.esa.int/" width="625" height="350" frameborder="0" scrolling="no" allowfullscreen=""></iframe><br/><iframe width="960" height="540" src="https://www.ustream.tv/embed/17074538" scrolling="no" allowfullscreen webkitallowfullscreen frameborder="0" style="border: 0 none transparent;"></iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python灾害预警</title>
    <link href="/p/40570f74.html"/>
    <url>/p/40570f74.html</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>主要采用requests爬取国家预警中心的API，检测本地灾害预警信息，格式化并推送Qmsg酱（QQ机器人），在服务器端<br>利用Crontab定时执行代码，实现动态监测功能。</p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><ol><li>Linux 平台</li><li>python 3.9</li><li>pip3 (requests)</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment">#qmsg推送函数</span><br><span class="hljs-comment">#详情请查看 https://qmsg.zendee.cn/</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">qmsg_push</span>(<span class="hljs-params">wa</span>):</span><br>    url2 = <span class="hljs-string">&quot;您自己的推送URL&quot;</span><br>    msg = <span class="hljs-string">&#x27;预警:\n&#x27;</span>+<span class="hljs-built_in">str</span>(wa)+<span class="hljs-string">&#x27;@&#x27;</span><br>    params = &#123;<span class="hljs-string">&quot;msg&quot;</span>: msg&#125;<br>    res = requests.post(url2, data=params)<br>    json2 =res.json()<br>    <span class="hljs-keyword">if</span> json2[<span class="hljs-string">&#x27;success&#x27;</span>]== <span class="hljs-literal">True</span> :<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Qmsg酱推送成功&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(res.text)<br>    <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Qmsg酱推送失败&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(res.text)<br><br><br><span class="hljs-comment">#获取预警信息</span><br>url = <span class="hljs-string">&quot;http://www.12379.cn/data/alarm_list_all.html&quot;</span><br>res = requests.post(url,timeout=<span class="hljs-literal">None</span>)<br>res.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>json2 = res.json()<br>warning=[]<br><span class="hljs-comment">#判断是否有对应城市预警信息已经对应类型</span><br><span class="hljs-comment">#一般预警平台会存在多条信息，第一条是最新的</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> json2[<span class="hljs-string">&#x27;alertData&#x27;</span>]:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;荔城区&#x27;</span> <span class="hljs-keyword">in</span> i[<span class="hljs-string">&#x27;headline&#x27;</span>] <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;荔城区&#x27;</span> <span class="hljs-keyword">in</span> i[<span class="hljs-string">&#x27;description&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;暴雨&#x27;</span> <span class="hljs-keyword">in</span> i[<span class="hljs-string">&#x27;headline&#x27;</span>]:<br>        warning.append(i[<span class="hljs-string">&#x27;description&#x27;</span>])<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#无预警退出</span><br><span class="hljs-comment">#有预警格式化并推送信息</span><br><span class="hljs-keyword">if</span>  warning==[] :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无预警&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    wa = json.dumps(warning,ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(wa)<br>    qmsg_push(wa)<br><br></code></pre></td></tr></table></figure><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><ol><li>Linux服务器</li><li>Python3</li><li>pip3安装requests<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip3 install requests<br></code></pre></td></tr></table></figure></li><li>创建文件<br>利用VIM或其他编辑器，写入代码到<code>yujing</code>文件内，添加执行权限。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x yujing<br></code></pre></td></tr></table></figure></li><li>定时脚本<br>Crontab设置定时任务<br>找到<code>yujing</code>文件位置,比如<code>/root/yujing</code>,新建一个<code>log</code>文件 然后<code>cronrab -e</code>进入编辑输入以下命令<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">*<span class="hljs-regexp">/60 * * * * /</span>root/yy &gt; <span class="hljs-regexp">/root/</span>log<br></code></pre></td></tr></table></figure></li><li>查看日志<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/root/</span>log<br></code></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2></li></ol><p><img src="https://img2020.cnblogs.com/blog/2028247/202108/2028247-20210805162548072-1769306353.png" alt="image"><br><a href="https://b23.tv/D9RVpE">bilibili演示地址</a></p><iframe src="//player.bilibili.com/player.html?aid=419673968&bvid=BV1m3411r7cu&cid=383106545&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="900px" height="600px"> </iframe><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>本文为Billyme原创，不允许任何形式的转载，本文地址<a href="https://www.cnblogs.com/billyme/p/15104031.html%E3%80%82">https://www.cnblogs.com/billyme/p/15104031.html。</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客介绍</title>
    <link href="/p/36423e12.html"/>
    <url>/p/36423e12.html</url>
    
    <content type="html"><![CDATA[<h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><p>该博客基于GiteePage和Hexo</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
